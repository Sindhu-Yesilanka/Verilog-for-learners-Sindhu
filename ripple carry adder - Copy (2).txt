//full adder
module full_adder (
    input a, b, cin,
    output sum, cout
);
    wire w1, w2, w3;

    xor (w1, a, b);
    xor (sum, w1, cin);
    and (w2, a, b);
    and (w3, w1, cin);
    or  (cout, w2, w3);
endmodule
//ripple carry adder
module ripple_carry_adder_4bit (
    input [3:0] a, b,
    input cin,
    output [3:0] sum,
    output cout
);
    wire c1, c2, c3;

    // Instantiate 4 full adders
    full_adder fa0 (a[0], b[0], cin,     sum[0], c1);
    full_adder fa1 (a[1], b[1], c1,      sum[1], c2);
    full_adder fa2 (a[2], b[2], c2,      sum[2], c3);
    full_adder fa3 (a[3], b[3], c3,      sum[3], cout);

endmodule
module tb_ripple_carry_adder_4bit;
    reg [3:0] a, b;
    reg cin;
    wire [3:0] sum;
    wire cout;

    // Instantiate the 4-bit ripple carry adder
    ripple_carry_adder_4bit rca (.a(a), .b(b), .cin(cin),.sum(sum), .cout(cout) );

    initial begin
        $monitor("Time = %0t | a = %b | b = %b | cin = %b || sum = %b | cout = %b", 
                  $time, a, b, cin, sum, cout);

        // Run 10 random test cases
        repeat (10) begin
            a = $random % 16;     // 4-bit random value
            b = $random % 16;
            cin = $random % 2;
            #10; // Wait for 10 time units
        end

        $finish;
    end
endmodule
