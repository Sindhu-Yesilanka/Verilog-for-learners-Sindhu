module comparator_2bit_4bitinput (input [3:0] in,output A_gt_B, A_eq_B, A_lt_B);
 // [3]=A1, [2]=A0, [1]=B1, [0]=B0
    wire A1 = in[3];
    wire A0 = in[2];
    wire B1 = in[1];
    wire B0 = in[0];

    wire notA1, notA0, notB1, notB0;
    wire A1_eq_B1, A0_eq_B0;
    wire temp1, temp2, temp3, temp4;

    // Inverters
    not (notA1, A1);
    not (notA0, A0);
    not (notB1, B1);
    not (notB0, B0);

    // Equality
    xnor (A1_eq_B1, A1, B1);
    xnor (A0_eq_B0, A0, B0);
    and  (A_eq_B, A1_eq_B1, A0_eq_B0);

    // Greater
    and (temp1, A1, notB1);
    and (temp2, A1_eq_B1, A0, notB0);
    or  (A_gt_B, temp1, temp2);

    // Less
    and (temp3, notA1, B1);
    and (temp4, A1_eq_B1, notA0, B0);
    or  (A_lt_B, temp3, temp4);

endmodule
module tb_comparator_2bit_4bitinput;

    reg [3:0] in;          // 4-bit input: [3]=A1, [2]=A0, [1]=B1, [0]=B0
    wire A1, A0, B1, B0;
    wire A_gt_B, A_eq_B, A_lt_B;

    // Position mapping
    assign A1 = in[3];
    assign A0 = in[2];
    assign B1 = in[1];
    assign B0 = in[0];

    // Instantiate the module using positional mapping
    // Module ports: input [3:0] in, output A_gt_B, output A_eq_B, output A_lt_B
    comparator_2bit_4bitinput uut (in, A_gt_B, A_eq_B, A_lt_B);

    integer i;

    initial begin
        $display("A1 A0 | B1 B0 || A_gt_B A_eq_B A_lt_B");
        $display("--------------------------------------");

        for (i = 0; i < 10; i = i + 1) begin
            in = $random % 16;  // random 4-bit number (0 to 15)
            #10;  // wait for output to stabilize
        end

        $finish;
    end

    initial begin
        $monitor(" %b  %b |  %b  %b || %b\t %b\t %b", A1, A0, B1, B0, A_gt_B, A_eq_B, A_lt_B);
    end

endmodule
