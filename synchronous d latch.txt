// Code your design here
module synchronous_Reset_D_Latch(D,rst,clk,Q);
  input D,clk,rst;
  output reg Q;
  always@(D,clk,rst)
    begin
      if(clk)
        begin
      if(rst)
        begin
        Q<=0;
        end
      else
        begin
        Q<=D;
    end
        end
    end
endmodule
//testbench for Synchronous Reset D Latch

module tb;
  reg D, clk, rst;
  wire Q;

  // Instantiate the DUT (Device Under Test)
  synchronous_Reset_D_Latch dut(D, rst, clk, Q);

  // Clock generation: toggle every 5 time units
  initial begin
    clk = 0;
    forever #5 clk = ~clk;
  end

  // Stimulus
  initial begin
    D = 0; rst = 0;

    #2 rst = 1;       // Assert reset
    #5 rst = 0;       // Deassert reset
    #3 D = 1;         // Set D
    #7 D = 0;
    #5 rst = 1;       // Asynchronous reset
    #2 rst = 0;
    #5 D = 1;
    #20 $finish;
  end

  initial 
    begin
    $display("||synchronous_Reset_D_Latch||");
    $display("Time\t rst clk D Q");
    $monitor("%0t\t %b   %b   %b %b", $time, rst, clk, D, Q);
  end
  initial
    begin
      $dumpfile("dump.vcd");
      $dumpvars(0,rst,clk,D,Q);
    end
endmodule
